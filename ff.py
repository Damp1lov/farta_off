import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}
user_data = {}

# –í–∞—à Telegram ID
ADMIN_ID = 1151245812  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("–î–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–µ", callback_data='dispatcher')],
        [InlineKeyboardButton("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ", callback_data='administrative')],
        [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–æ–µ", callback_data='management')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', reply_markup=reply_markup)
    user_state[update.effective_user.id] = 'choose_direction'

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == 'back':
        current_state = user_state.get(user_id, {}).get('state')
        
        if current_state == 'select_day':
            keyboard = [
                [InlineKeyboardButton("9:00", callback_data='9:00'), InlineKeyboardButton("9:15", callback_data='9:15')],
                [InlineKeyboardButton("9:30", callback_data='9:30'), InlineKeyboardButton("9:45", callback_data='9:45')],
                [InlineKeyboardButton("15:30", callback_data='15:30'), InlineKeyboardButton("15:45", callback_data='15:45')],
                [InlineKeyboardButton("16:00", callback_data='16:00'), InlineKeyboardButton("16:15", callback_data='16:15')],
                [InlineKeyboardButton("16:30", callback_data='16:30'), InlineKeyboardButton("17:00", callback_data='17:00')],
                [InlineKeyboardButton("16:45", callback_data='16:45'), InlineKeyboardButton("17:15", callback_data='17:15')],
                [InlineKeyboardButton("17:30", callback_data='17:30'), InlineKeyboardButton("17:45", callback_data='17:45')],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –ø–æ–¥–æ–π—Ç–∏', reply_markup=reply_markup)
            user_state[user_id] = {'state': 'select_time'}
            return
        elif current_state == 'select_time':
            keyboard = [
                [InlineKeyboardButton("–î–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–µ", callback_data='dispatcher')],
                [InlineKeyboardButton("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ", callback_data='administrative')],
                [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–æ–µ", callback_data='management')],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', reply_markup=reply_markup)
            user_state.pop(user_id, None)
            return
        elif current_state in ['dispatcher', 'administrative', 'management']:
            text, keyboard = get_direction_text_and_keyboard(current_state)
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text=text, reply_markup=reply_markup)
            return

    if query.data in ['9:00', '9:15', '9:30', '9:45', '16:30', '17:00', '16:45', '17:15']:
        keyboard = [
            [InlineKeyboardButton("–ü–ù", callback_data='–ü–ù')],
            [InlineKeyboardButton("–í–¢", callback_data='–í–¢')],
            [InlineKeyboardButton("–°–†", callback_data='–°–†')],
            [InlineKeyboardButton("–ß–¢", callback_data='–ß–¢')],
            [InlineKeyboardButton("–ü–¢", callback_data='–ü–¢')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –ø–æ–¥–æ–π—Ç–∏', reply_markup=reply_markup)
        user_state[user_id] = {'state': 'select_day', 'time': query.data}
        return

    if query.data in ['15:30', '15:45', '16:00', '16:15', '17:30', '17:45']:
        keyboard = [
            [InlineKeyboardButton("–ü–¢", callback_data='–ü–¢')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –ø–æ–¥–æ–π—Ç–∏', reply_markup=reply_markup)
        user_state[user_id] = {'state': 'select_day', 'time': query.data}
        return

    if query.data == 'next':
        current_state = user_state.get(user_id)
        if current_state and current_state['state'] in ['dispatcher', 'administrative', 'management']:
            keyboard = [
                [InlineKeyboardButton("9:00", callback_data='9:00'), InlineKeyboardButton("9:15", callback_data='9:15')],
                [InlineKeyboardButton("9:30", callback_data='9:30'), InlineKeyboardButton("9:45", callback_data='9:45')],
                [InlineKeyboardButton("15:30", callback_data='15:30'), InlineKeyboardButton("15:45", callback_data='15:45')],
                [InlineKeyboardButton("16:00", callback_data='16:00'), InlineKeyboardButton("16:15", callback_data='16:15')],
                [InlineKeyboardButton("16:30", callback_data='16:30'), InlineKeyboardButton("17:00", callback_data='17:00')],
                [InlineKeyboardButton("16:45", callback_data='16:45'), InlineKeyboardButton("17:15", callback_data='17:15')],
                [InlineKeyboardButton("17:30", callback_data='17:30'), InlineKeyboardButton("17:45", callback_data='17:45')],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –ø–æ–¥–æ–π—Ç–∏', reply_markup=reply_markup)
            user_state[user_id] = {'state': 'select_time'}
            return

    if query.data in ['–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢']:
        user_state[user_id] = {'state': 'collect_data', 'day': query.data, 'time': user_state[user_id]['time']}
        await query.edit_message_text('–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ—ë –§–ò–û –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥—è—Ç –∑–∞–ø–∏—Å—å')
        return

    if query.data in ['dispatcher', 'administrative', 'management']:
        user_state[user_id] = {'state': query.data}

    text, keyboard = get_direction_text_and_keyboard(query.data)
    if text:
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup)

def get_direction_text_and_keyboard(direction):
    if direction == 'dispatcher':
        text = """üìå –î–ò–°–ü–ï–¢–ß–ï–†–°–ö–û–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï ‚Äì
- –ü—Ä–∏–µ–º –≤—Ö–æ–¥—è—â–∏—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
- –ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ –∏ –∑–∞–∫–∞–∑–æ–≤
- –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
- –í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∫–æ–º–ø–∞–Ω–∏–∏
- –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
- –û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º
- –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã 2/2
- –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã 5/2
- –ú–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
–û–ø–ª–∞—Ç–∞ –æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è –∏—Å—Ö–æ–¥—è –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è."""
    elif direction == 'administrative':
        text = """üìå –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–û–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï (–ú–ï–ù–ï–î–ñ–ï–†) ‚Äì
- –ö–æ–Ω—Ç—Ä–æ–ª—å –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º –≤ –æ—Ñ–∏—Å–µ
- –ü—Ä–∏–µ–º –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
- –í–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤
- –í–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∏ –æ—Ç—á–µ—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, —Ä–µ—à–µ–Ω–∏–µ –æ—Ä–≥. –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –æ—Ñ–∏—Å—É
- –ì–†–ê–§–ò–ö (–º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, —Ç–∞–∫ –∂–µ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã 2/2, 5/2)
- –û–ø–ª–∞—Ç–∞ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ –≤ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –ø–æ—Ä—è–¥–∫–∞ 45 000, —Å–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –ø–æ—Ä—è–¥–∫–∞ 55 000 + –ø—Ä–µ–º–∏–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å."""
    elif direction == 'management':
        text = """üìå –£–ü–†–ê–í–õ–ï–ù–ß–ï–°–ö–û–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï ‚Äì
- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –æ—Ç–¥–µ–ª–∞–º–∏ –∏ —Ñ–∏–ª–∏–∞–ª–∞–º–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
- –ò–Ω—Å—Ç—Ä—É–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫–æ–Ω—Ç—Ä–æ–ª—å, —É—á–∞—Å—Ç–∏–µ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞
- –ì–†–ê–§–ò–ö ‚Äì 5/2, –æ–ø–ª–∞—Ç–∞ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–π –º–µ—Å—è—Ü –ø–æ—Ä—è–¥–∫–∞ 95 000, —Å–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –ø–æ—Ä—è–¥–∫–∞ 120 000 + –£—Å–ª–æ–≤–∏—è –æ–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç—Å—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏"""
    else:
        text = ""
    
    keyboard = [[InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data='next')],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]]
    
    return text, keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def collect_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    current_state = user_state.get(user_id)

    if current_state and current_state['state'] == 'collect_data':
        user_data[user_id] = update.message.text
        day = current_state['day']
        time = current_state['time']
        user_state.pop(user_id, None)
        
        confirmation_text = f"{user_data[user_id]}, –î–õ–Ø –ë–û–õ–ï–ï –î–ï–¢–ê–õ–¨–ù–û–ì–û –†–ê–ó–ì–û–í–û–†–ê –ñ–î–Å–ú –í–ê–° –≤ {day} –≤ {time} –ø–æ –∞–¥—Ä–µ—Å—É:\n–£–ª. –ë–æ–≥–¥–∞–Ω–∞ –•–º–µ–ª—å–Ω–∏—Ü–∫–æ–≥–æ 59 4-–π —ç—Ç–∞–∂ 432 –æ—Ñ–∏—Å\n–°–ø—Ä–æ—Å–∏—Ç–µ –Ω–∞ –≤—Ö–æ–¥–µ –¢–∏–º—É—Ä–∞ –°–∞—è–Ω–æ–≤–∏—á–∞"
        await update.message.reply_text(confirmation_text)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        username = update.message.from_user.username
        admin_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É.\n\n–î–∞–Ω–Ω—ã–µ: {user_data[user_id]}\n–î–∞—Ç–∞: {day}\n–í—Ä–µ–º—è: {time}"
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {admin_text}")
        await context.bot.send_message(chat_id=ADMIN_ID, text=admin_text)

def main():
    application = Application.builder().token("7417215075:AAFz39utBJGcVQT6DS4_eELk15E0GPjxc94").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, collect_data))

    application.run_polling()

if __name__ == '__main__':
    main()
